generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}

model Certification {
  id                   Int            @id @default(autoincrement())
  name                 String
  category             String
  eligibility          String?
  subjects             String?
  examFormat           String?
  examDuration         String?
  passingCriteria      String?
  fee                  String?
  announcementSchedule String?
  notification         Notification[]
  quizRanges           QuizRange[]
  schedules            Schedule[]
}

model Exam {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  examDate  DateTime
  examRange String
  memo      String?
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Notification {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  day             String
  startTime       String
  endTime         String
  quizType        String
  certificationId Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  certification   Certification @relation(fields: [certificationId], references: [id])
}

model QuizRange {
  id              Int           @id @default(autoincrement())
  certification   Certification @relation(fields: [certificationId], references: [id])
  certificationId Int
  rangeTitle      String
  rangeDetails    String
  quizResults     QuizResult[]
}

model QuizResult {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  quizRange   QuizRange @relation(fields: [quizRangeId], references: [id])
  quizRangeId Int
  isCorrect   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Schedule {
  id                Int           @id @default(autoincrement())
  certification     Certification @relation(fields: [certificationId], references: [id])
  certificationId   Int
  examDate          DateTime
  registrationStart DateTime
  registrationEnd   DateTime
}

model User {
  id                Int            @id @default(autoincrement())
  name              String
  email             String         @unique
  nickname          String?
  profileImage      String?
  oauthProvider     String?
  oauthAccessToken  String?       @db.Text
  oauthRefreshToken String?       @db.Text
  userCategory      String?
  employmentStatus  String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  age               Int?
  department        String?
  grade             String?
  exams             Exam[]
  notifications     Notification[]
  quizResults       QuizResult[]
}
